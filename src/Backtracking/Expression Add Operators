import java.util.*;

class Solution {
    public List<String> addOperators(String num, int target) {
        List<String> result = new ArrayList<>();
        backtrack(result, num, target, 0, 0, 0, "");
        return result;
    }

    private void backtrack(List<String> result, String num, int target, int pos, long eval, long multed, String path) {
        // Base case: reached end of string
        if (pos == num.length()) {
            if (eval == target) result.add(path);
            return;
        }

        for (int i = pos; i < num.length(); i++) {
            // avoid numbers with leading zero
            if (i != pos && num.charAt(pos) == '0') break;

            long curr = Long.parseLong(num.substring(pos, i + 1));

            if (pos == 0) {
                // first number, no operator before it
                backtrack(result, num, target, i + 1, curr, curr, path + curr);
            } else {
                // +
                backtrack(result, num, target, i + 1, eval + curr, curr, path + "+" + curr);
                // -
                backtrack(result, num, target, i + 1, eval - curr, -curr, path + "-" + curr);
                // *
                backtrack(result, num, target, i + 1, eval - multed + multed * curr, multed * curr, path + "*" + curr);
            }
        }
    }
}
