class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> ans = new ArrayList<>();
        helper(0, ans, new ArrayList<>(), s);
        return ans;
    }
    public void helper(int idx, List<List<String>> ans, List<String> list, String s) {
        // BASE CASE
        if(idx == s.length()) {
            ans.add(new ArrayList<>(list));
            return;
        }

        for(int i = idx; i < s.length(); i++) {
            if(isPalindrome(s, idx, i)) {
                list.add(s.substring(idx, i + 1));
                helper(i+1, ans, list, s);
                // Backtracking
                list.remove(list.size()-1);
            }
        }
    }

    public boolean isPalindrome(String s, int start, int end) {
        while(start <= end){
            if(s.charAt(start) != s.charAt(end)) return false;
            start++; end--;
        }
        return true;
    }
}
