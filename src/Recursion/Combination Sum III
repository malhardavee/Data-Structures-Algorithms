class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        int[] arr = {1, 2, 3, 4, 5, 6, 7, 8, 9};
        List<List<Integer>> ans = new ArrayList<>();
        int temp = k;
        helper(arr, ans, new ArrayList<>(), 0, temp, k, n, 0);   
        return ans; 
    }

    public void helper(int[] arr, List<List<Integer>> ans, List<Integer> list, int sum, int temp, int k, int n, int idx) {
        // BASE CASE 1
        if (sum == n && list.size() == k) {
            ans.add(new ArrayList<>(list));
            return;
        }

        // BASE CASE 2
        if (sum > n || list.size() > k) {
            return;
        }

        for (int i = idx; i < arr.length; i++) {
            list.add(arr[i]);
            helper(arr, ans, list, sum + arr[i], temp - 1, k, n, i + 1);
            // BACKTRACKING 
            list.remove(list.size() - 1);
        }
    }
}
